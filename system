// This #include statement was automatically added by the Particle IDE.
#include <HC_SR04.h>


#include "HC_SR04.h"


double cm = 0.0;
double inches = 0.0;

int trigPin = A0;
int echoPin = D0;
char Distance[4];
int led = D4;
int led2= D6;
int led1 = D5;


/*
Connect an HC-SR04 Range finder as follows:
Spark   HC-SR04
GND     GND
5V      VCC
D4      Trig
D5      Voltage divider output - see below

Echo --|
       >
       < 470 ohm resistor
       >
       ------ D5 on Spark
       >
       < 470 ohm resistor
       >
GND ---|

Test it using curl like this:
curl https://api.spark.io/v1/devices/<deviceid>/cm?access_token=<accesstoken>

The default usable rangefinder is 10cm to 250cm. Outside of that range -1 is returned as the distance.

You can change this range by supplying two extra parameters to the constructor of minCM and maxCM, like this:

HC_SR04 rangefinder = HC_SR04(trigPin, echoPin, 5.0, 300.0);

*/


HC_SR04 rangefinder = HC_SR04(trigPin, echoPin);

void setup() 

{
pinMode(led,OUTPUT);
pinMode(led1,OUTPUT);
pinMode(led2,OUTPUT);


    
}



 

void loop() 
{
    cm = rangefinder.getDistanceCM();
    inches = rangefinder.getDistanceInch();
    delay(100);

    sprintf(Distance, "%d", cm);



if(cm < 6){
    
        digitalWrite(led, HIGH);
         digitalWrite(led1, LOW);
         digitalWrite(led2, LOW);
        
       
        
 }
 
  else if( cm > 8 && cm < 16 ){
   
 
     
       digitalWrite(led, LOW);
        digitalWrite(led1, HIGH);
        digitalWrite(led2, LOW);
        Spark.publish("waterlevel", "at mid point", 60, PRIVATE );
     
        
 }
 
  else if(cm > 18 && cm < 24 ){
      
    digitalWrite(led, LOW);
        digitalWrite(led1, LOW);
        digitalWrite(led2, HIGH);
        
        Spark.publish("waterlevel", "at end", 60, PRIVATE );
        
     
}

delay(100);


}
